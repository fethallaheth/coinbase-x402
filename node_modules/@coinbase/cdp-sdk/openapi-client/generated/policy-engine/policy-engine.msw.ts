/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Coinbase Developer Platform APIs
 * The Coinbase Developer Platform APIs - leading the world's transition onchain.
 * OpenAPI spec version: 2.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  EthValueCriterion,
  EvmAddressCriterion,
  ListPolicies200,
  Policy,
  SolAddressCriterion,
} from "../coinbaseDeveloperPlatformAPIs.schemas.js";

export const getListPoliciesResponseEthValueCriterionMock = (
  overrideResponse: Partial<EthValueCriterion> = {},
): EthValueCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["ethValue"] as const),
    ethValue: faker.helpers.fromRegExp("^[0-9]+$"),
    operator: faker.helpers.arrayElement([">", ">=", "<", "<=", "=="] as const),
  },
  ...overrideResponse,
});

export const getListPoliciesResponseEvmAddressCriterionMock = (
  overrideResponse: Partial<EvmAddressCriterion> = {},
): EvmAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["evmAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getListPoliciesResponseSolAddressCriterionMock = (
  overrideResponse: Partial<SolAddressCriterion> = {},
): SolAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["solAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getListPoliciesResponseMock = (): ListPolicies200 => ({
  ...{
    policies: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => ({
        id: faker.helpers.fromRegExp(
          "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
        ),
        description: faker.helpers.arrayElement([
          faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
          undefined,
        ]),
        scope: faker.helpers.arrayElement(["project", "account"] as const),
        rules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
          () => ({
            action: faker.helpers.arrayElement(["reject", "accept"] as const),
            operation: faker.helpers.arrayElement([
              "signEvmTransaction",
              "signSolTransaction",
            ] as const),
            criteria: faker.helpers.arrayElement([
              Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                () =>
                  faker.helpers.arrayElement([
                    { ...getListPoliciesResponseEthValueCriterionMock() },
                    { ...getListPoliciesResponseEvmAddressCriterionMock() },
                  ]),
              ),
              Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
                () =>
                  faker.helpers.arrayElement([
                    { ...getListPoliciesResponseSolAddressCriterionMock() },
                  ]),
              ),
            ]),
          }),
        ),
        createdAt: faker.string.alpha(20),
        updatedAt: faker.string.alpha(20),
      }),
    ),
  },
  ...{ nextPageToken: faker.helpers.arrayElement([faker.string.alpha(20), undefined]) },
});

export const getCreatePolicyResponseEthValueCriterionMock = (
  overrideResponse: Partial<EthValueCriterion> = {},
): EthValueCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["ethValue"] as const),
    ethValue: faker.helpers.fromRegExp("^[0-9]+$"),
    operator: faker.helpers.arrayElement([">", ">=", "<", "<=", "=="] as const),
  },
  ...overrideResponse,
});

export const getCreatePolicyResponseEvmAddressCriterionMock = (
  overrideResponse: Partial<EvmAddressCriterion> = {},
): EvmAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["evmAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getCreatePolicyResponseSolAddressCriterionMock = (
  overrideResponse: Partial<SolAddressCriterion> = {},
): SolAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["solAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getCreatePolicyResponseMock = (overrideResponse: Partial<Policy> = {}): Policy => ({
  id: faker.helpers.fromRegExp(
    "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
  ),
  description: faker.helpers.arrayElement([
    faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
    undefined,
  ]),
  scope: faker.helpers.arrayElement(["project", "account"] as const),
  rules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    action: faker.helpers.arrayElement(["reject", "accept"] as const),
    operation: faker.helpers.arrayElement(["signEvmTransaction", "signSolTransaction"] as const),
    criteria: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.helpers.arrayElement([
          { ...getCreatePolicyResponseEthValueCriterionMock() },
          { ...getCreatePolicyResponseEvmAddressCriterionMock() },
        ]),
      ),
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.helpers.arrayElement([{ ...getCreatePolicyResponseSolAddressCriterionMock() }]),
      ),
    ]),
  })),
  createdAt: faker.string.alpha(20),
  updatedAt: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetPolicyByIdResponseEthValueCriterionMock = (
  overrideResponse: Partial<EthValueCriterion> = {},
): EthValueCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["ethValue"] as const),
    ethValue: faker.helpers.fromRegExp("^[0-9]+$"),
    operator: faker.helpers.arrayElement([">", ">=", "<", "<=", "=="] as const),
  },
  ...overrideResponse,
});

export const getGetPolicyByIdResponseEvmAddressCriterionMock = (
  overrideResponse: Partial<EvmAddressCriterion> = {},
): EvmAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["evmAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getGetPolicyByIdResponseSolAddressCriterionMock = (
  overrideResponse: Partial<SolAddressCriterion> = {},
): SolAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["solAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getGetPolicyByIdResponseMock = (overrideResponse: Partial<Policy> = {}): Policy => ({
  id: faker.helpers.fromRegExp(
    "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
  ),
  description: faker.helpers.arrayElement([
    faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
    undefined,
  ]),
  scope: faker.helpers.arrayElement(["project", "account"] as const),
  rules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    action: faker.helpers.arrayElement(["reject", "accept"] as const),
    operation: faker.helpers.arrayElement(["signEvmTransaction", "signSolTransaction"] as const),
    criteria: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.helpers.arrayElement([
          { ...getGetPolicyByIdResponseEthValueCriterionMock() },
          { ...getGetPolicyByIdResponseEvmAddressCriterionMock() },
        ]),
      ),
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.helpers.arrayElement([{ ...getGetPolicyByIdResponseSolAddressCriterionMock() }]),
      ),
    ]),
  })),
  createdAt: faker.string.alpha(20),
  updatedAt: faker.string.alpha(20),
  ...overrideResponse,
});

export const getUpdatePolicyResponseEthValueCriterionMock = (
  overrideResponse: Partial<EthValueCriterion> = {},
): EthValueCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["ethValue"] as const),
    ethValue: faker.helpers.fromRegExp("^[0-9]+$"),
    operator: faker.helpers.arrayElement([">", ">=", "<", "<=", "=="] as const),
  },
  ...overrideResponse,
});

export const getUpdatePolicyResponseEvmAddressCriterionMock = (
  overrideResponse: Partial<EvmAddressCriterion> = {},
): EvmAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["evmAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^0x[0-9a-fA-F]{40}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getUpdatePolicyResponseSolAddressCriterionMock = (
  overrideResponse: Partial<SolAddressCriterion> = {},
): SolAddressCriterion => ({
  ...{
    type: faker.helpers.arrayElement(["solAddress"] as const),
    addresses: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(
      () => faker.helpers.fromRegExp("^[1-9A-HJ-NP-Za-km-z]{32,44}$"),
    ),
    operator: faker.helpers.arrayElement(["in", "not in"] as const),
  },
  ...overrideResponse,
});

export const getUpdatePolicyResponseMock = (overrideResponse: Partial<Policy> = {}): Policy => ({
  id: faker.helpers.fromRegExp(
    "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$",
  ),
  description: faker.helpers.arrayElement([
    faker.helpers.fromRegExp("^[A-Za-z0-9 ,.]{1,50}$"),
    undefined,
  ]),
  scope: faker.helpers.arrayElement(["project", "account"] as const),
  rules: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({
    action: faker.helpers.arrayElement(["reject", "accept"] as const),
    operation: faker.helpers.arrayElement(["signEvmTransaction", "signSolTransaction"] as const),
    criteria: faker.helpers.arrayElement([
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.helpers.arrayElement([
          { ...getUpdatePolicyResponseEthValueCriterionMock() },
          { ...getUpdatePolicyResponseEvmAddressCriterionMock() },
        ]),
      ),
      Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() =>
        faker.helpers.arrayElement([{ ...getUpdatePolicyResponseSolAddressCriterionMock() }]),
      ),
    ]),
  })),
  createdAt: faker.string.alpha(20),
  updatedAt: faker.string.alpha(20),
  ...overrideResponse,
});

export const getListPoliciesMockHandler = (
  overrideResponse?:
    | ListPolicies200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ListPolicies200> | ListPolicies200),
) => {
  return http.get("*/v2/policy-engine/policies", async info => {
    await delay(0);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListPoliciesResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreatePolicyMockHandler = (
  overrideResponse?:
    | Policy
    | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Policy> | Policy),
) => {
  return http.post("*/v2/policy-engine/policies", async info => {
    await delay(0);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreatePolicyResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetPolicyByIdMockHandler = (
  overrideResponse?:
    | Policy
    | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Policy> | Policy),
) => {
  return http.get("*/v2/policy-engine/policies/:policyId", async info => {
    await delay(0);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetPolicyByIdResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeletePolicyMockHandler = (
  overrideResponse?:
    | void
    | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void),
) => {
  return http.delete("*/v2/policy-engine/policies/:policyId", async info => {
    await delay(0);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};

export const getUpdatePolicyMockHandler = (
  overrideResponse?:
    | Policy
    | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<Policy> | Policy),
) => {
  return http.put("*/v2/policy-engine/policies/:policyId", async info => {
    await delay(0);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdatePolicyResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getPolicyEngineMock = () => [
  getListPoliciesMockHandler(),
  getCreatePolicyMockHandler(),
  getGetPolicyByIdMockHandler(),
  getDeletePolicyMockHandler(),
  getUpdatePolicyMockHandler(),
];
