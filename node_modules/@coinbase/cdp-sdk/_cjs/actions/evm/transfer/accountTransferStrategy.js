"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.accountTransferStrategy = void 0;
const viem_1 = require("viem");
const utils_js_1 = require("./utils.js");
const serializeTransaction_js_1 = require("../../../utils/serializeTransaction.js");
exports.accountTransferStrategy = {
    executeTransfer: async ({ apiClient, from, to, value, token, network }) => {
        const transactionHash = await (async () => {
            if (token === "eth") {
                const result = await apiClient.sendEvmTransaction(from.address, {
                    transaction: (0, serializeTransaction_js_1.serializeEIP1559Transaction)({
                        value,
                        to,
                    }),
                    network,
                });
                return result.transactionHash;
            }
            else {
                const erc20Address = (0, utils_js_1.getErc20Address)(token, network);
                await apiClient.sendEvmTransaction(from.address, {
                    transaction: (0, serializeTransaction_js_1.serializeEIP1559Transaction)({
                        to: erc20Address,
                        data: (0, viem_1.encodeFunctionData)({
                            abi: viem_1.erc20Abi,
                            functionName: "approve",
                            args: [to, value],
                        }),
                    }),
                    network,
                });
                const result = await apiClient.sendEvmTransaction(from.address, {
                    transaction: (0, serializeTransaction_js_1.serializeEIP1559Transaction)({
                        to: erc20Address,
                        data: (0, viem_1.encodeFunctionData)({
                            abi: viem_1.erc20Abi,
                            functionName: "transfer",
                            args: [to, value],
                        }),
                    }),
                    network,
                });
                return result.transactionHash;
            }
        })();
        return transactionHash;
    },
    waitForResult: async ({ publicClient, hash, waitOptions }) => {
        let receipt;
        try {
            receipt = await publicClient.waitForTransactionReceipt({
                hash,
                pollingInterval: waitOptions?.intervalSeconds
                    ? waitOptions.intervalSeconds * 1000
                    : undefined,
                timeout: waitOptions?.timeoutSeconds ? waitOptions.timeoutSeconds * 1000 : undefined,
            });
        }
        catch (error) {
            if (error instanceof viem_1.WaitForTransactionReceiptTimeoutError) {
                throw new Error(`Transaction timed out. Check the transaction on the explorer: ${publicClient.chain.blockExplorers?.default.url}/tx/${hash}`);
            }
            else {
                throw error;
            }
        }
        if (receipt.status === "success") {
            return { status: receipt.status, transactionHash: hash };
        }
        else {
            throw new Error(`Transaction failed. Check the transaction on the explorer: ${publicClient.chain.blockExplorers?.default.url}/tx/${hash}`);
        }
    },
};
//# sourceMappingURL=accountTransferStrategy.js.map