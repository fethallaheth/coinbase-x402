"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.smartAccountTransferStrategy = void 0;
const viem_1 = require("viem");
const utils_js_1 = require("./utils.js");
const sendUserOperation_js_1 = require("../sendUserOperation.js");
const waitForUserOperation_js_1 = require("../waitForUserOperation.js");
exports.smartAccountTransferStrategy = {
    executeTransfer: async ({ apiClient, from, to, value, token, network, paymasterUrl }) => {
        const userOpHash = await (async () => {
            if (token === "eth") {
                const result = await (0, sendUserOperation_js_1.sendUserOperation)(apiClient, {
                    smartAccount: from,
                    paymasterUrl,
                    network,
                    calls: [
                        {
                            to,
                            value,
                            data: "0x",
                        },
                    ],
                });
                return result.userOpHash;
            }
            else {
                const erc20Address = (0, utils_js_1.getErc20Address)(token, network);
                const result = await (0, sendUserOperation_js_1.sendUserOperation)(apiClient, {
                    smartAccount: from,
                    paymasterUrl,
                    network,
                    calls: [
                        {
                            to: erc20Address,
                            data: (0, viem_1.encodeFunctionData)({
                                abi: viem_1.erc20Abi,
                                functionName: "approve",
                                args: [to, value],
                            }),
                        },
                        {
                            to: erc20Address,
                            data: (0, viem_1.encodeFunctionData)({
                                abi: viem_1.erc20Abi,
                                functionName: "transfer",
                                args: [to, value],
                            }),
                        },
                    ],
                });
                return result.userOpHash;
            }
        })();
        return userOpHash;
    },
    waitForResult: async ({ apiClient, publicClient, from, hash, waitOptions }) => {
        const result = await (0, waitForUserOperation_js_1.waitForUserOperation)(apiClient, {
            smartAccountAddress: from.address,
            userOpHash: hash,
            waitOptions,
        });
        if (result.status === "complete") {
            return { status: "success", transactionHash: hash };
        }
        else {
            throw new Error(`Transaction failed. Check the transaction on the explorer: ${publicClient.chain.blockExplorers?.default.url}/tx/${hash}`);
        }
    },
};
//# sourceMappingURL=smartAccountTransferStrategy.js.map