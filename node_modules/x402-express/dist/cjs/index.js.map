{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { Address } from \"viem\";\nimport { exact } from \"x402/schemes\";\nimport {\n  computeRoutePatterns,\n  findMatchingPaymentRequirements,\n  findMatchingRoute,\n  getPaywallHtml,\n  processPriceToAtomicAmount,\n  toJsonSafe,\n} from \"x402/shared\";\nimport {\n  FacilitatorConfig,\n  moneySchema,\n  PaymentPayload,\n  PaymentRequirements,\n  Resource,\n  RoutesConfig,\n  settleResponseHeader,\n} from \"x402/types\";\nimport { useFacilitator } from \"x402/verify\";\n\n/**\n * Creates a payment middleware factory for Express\n *\n * @param payTo - The Ethereum address to receive payments\n * @param routes - Configuration for protected routes and their payment requirements\n * @param facilitator - Optional configuration for the payment facilitator service\n * @returns An Express middleware handler\n *\n * @example\n * ```typescript\n * // Full configuration with specific routes\n * const middleware = paymentMiddleware({\n *   facilitator: {\n *     url: 'https://facilitator.example.com',\n *     createAuthHeaders: async () => ({\n *       verify: { \"Authorization\": \"Bearer token\" },\n *       settle: { \"Authorization\": \"Bearer token\" }\n *     })\n *   },\n *   payTo: '0x123...',\n *   routes: {\n *     '/weather/*': {\n *       price: '$0.001', // USDC amount in dollars\n *       config: {\n *         description: 'Access to weather data'\n *       }\n *     }\n *   }\n * });\n *\n * // Simple configuration with a single price for all routes\n * const middleware = paymentMiddleware({\n *   facilitator: {\n *     url: 'https://facilitator.example.com'\n *   },\n *   payTo: '0x123...',\n *   routes: {\n *     price: '$0.01',\n *     network: 'base'\n *   }\n * });\n * ```\n */\nexport function paymentMiddleware(\n  payTo: Address,\n  routes: RoutesConfig,\n  facilitator?: FacilitatorConfig,\n) {\n  const { verify, settle } = useFacilitator(facilitator);\n  const x402Version = 1;\n\n  // Pre-compile route patterns to regex and extract verbs\n  const routePatterns = computeRoutePatterns(routes);\n\n  return async function paymentMiddleware(\n    req: Request,\n    res: Response,\n    next: NextFunction,\n  ): Promise<void> {\n    const matchingRoute = findMatchingRoute(routePatterns, req.path, req.method.toUpperCase());\n\n    if (!matchingRoute) {\n      return next();\n    }\n\n    const { price, network, config = {} } = matchingRoute.config;\n    const { description, mimeType, maxTimeoutSeconds, outputSchema, customPaywallHtml, resource } =\n      config;\n\n    const atomicAmountForAsset = processPriceToAtomicAmount(price, network);\n    if (\"error\" in atomicAmountForAsset) {\n      throw new Error(atomicAmountForAsset.error);\n    }\n    const { maxAmountRequired, asset } = atomicAmountForAsset;\n\n    const resourceUrl: Resource =\n      resource || (`${req.protocol}://${req.headers.host}${req.path}` as Resource);\n\n    const paymentRequirements: PaymentRequirements[] = [\n      {\n        scheme: \"exact\",\n        network,\n        maxAmountRequired,\n        resource: resourceUrl,\n        description: description ?? \"\",\n        mimeType: mimeType ?? \"\",\n        payTo,\n        maxTimeoutSeconds: maxTimeoutSeconds ?? 60,\n        asset: asset.address,\n        outputSchema: outputSchema ?? undefined,\n        extra: {\n          name: asset.eip712.name,\n          version: asset.eip712.version,\n        },\n      },\n    ];\n\n    const payment = req.header(\"X-PAYMENT\");\n    const userAgent = req.header(\"User-Agent\") || \"\";\n    const acceptHeader = req.header(\"Accept\") || \"\";\n    const isWebBrowser = acceptHeader.includes(\"text/html\") && userAgent.includes(\"Mozilla\");\n\n    if (!payment) {\n      if (isWebBrowser) {\n        let displayAmount: number;\n        if (typeof price === \"string\" || typeof price === \"number\") {\n          const parsed = moneySchema.safeParse(price);\n          if (parsed.success) {\n            displayAmount = parsed.data;\n          } else {\n            displayAmount = Number.NaN;\n          }\n        } else {\n          displayAmount = Number(price.amount) / 10 ** price.asset.decimals;\n        }\n\n        const html =\n          customPaywallHtml ||\n          getPaywallHtml({\n            amount: displayAmount,\n            paymentRequirements: toJsonSafe(paymentRequirements) as Parameters<\n              typeof getPaywallHtml\n            >[0][\"paymentRequirements\"],\n            currentUrl: req.originalUrl,\n            testnet: network === \"base-sepolia\",\n          });\n        res.status(402).send(html);\n        return;\n      }\n      res.status(402).json({\n        x402Version,\n        error: \"X-PAYMENT header is required\",\n        accepts: toJsonSafe(paymentRequirements),\n      });\n      return;\n    }\n\n    let decodedPayment: PaymentPayload;\n    try {\n      decodedPayment = exact.evm.decodePayment(payment);\n      decodedPayment.x402Version = x402Version;\n    } catch (error) {\n      res.status(402).json({\n        x402Version,\n        error: error || \"Invalid or malformed payment header\",\n        accepts: toJsonSafe(paymentRequirements),\n      });\n      return;\n    }\n\n    const selectedPaymentRequirements = findMatchingPaymentRequirements(\n      paymentRequirements,\n      decodedPayment,\n    );\n    if (!selectedPaymentRequirements) {\n      res.status(402).json({\n        x402Version,\n        error: \"Unable to find matching payment requirements\",\n        accepts: toJsonSafe(paymentRequirements),\n      });\n      return;\n    }\n\n    try {\n      const response = await verify(decodedPayment, selectedPaymentRequirements);\n      if (!response.isValid) {\n        res.status(402).json({\n          x402Version,\n          error: response.invalidReason,\n          accepts: toJsonSafe(paymentRequirements),\n          payer: response.payer,\n        });\n        return;\n      }\n    } catch (error) {\n      res.status(402).json({\n        x402Version,\n        error,\n        accepts: toJsonSafe(paymentRequirements),\n      });\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    type EndArgs =\n      | [cb?: () => void]\n      | [chunk: any, cb?: () => void]\n      | [chunk: any, encoding: BufferEncoding, cb?: () => void];\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n\n    const originalEnd = res.end.bind(res);\n    let endArgs: EndArgs | null = null;\n\n    res.end = function (...args: EndArgs) {\n      endArgs = args;\n      return res; // maintain correct return type\n    };\n\n    // Proceed to the next middleware or route handler\n    await next();\n\n    try {\n      const settleResponse = await settle(decodedPayment, selectedPaymentRequirements);\n      const responseHeader = settleResponseHeader(settleResponse);\n      res.setHeader(\"X-PAYMENT-RESPONSE\", responseHeader);\n    } catch (error) {\n      // If settlement fails and the response hasn't been sent yet, return an error\n      if (!res.headersSent) {\n        res.status(402).json({\n          x402Version,\n          error,\n          accepts: toJsonSafe(paymentRequirements),\n        });\n        return;\n      }\n    } finally {\n      res.end = originalEnd;\n      if (endArgs) {\n        originalEnd(...(endArgs as Parameters<typeof res.end>));\n      }\n    }\n  };\n}\n\nexport type {\n  Money,\n  Network,\n  PaymentMiddlewareConfig,\n  Resource,\n  RouteConfig,\n  RoutesConfig,\n} from \"x402/types\";\n"],"mappings":"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","names":["paymentMiddleware"]}