// src/index.ts
import { ChainIdToNetwork, PaymentRequirementsSchema } from "x402/types";
import { evm } from "x402/types";
import {
  createPaymentHeader,
  selectPaymentRequirements
} from "x402/client";
import { decodeXPaymentResponse } from "x402/shared";
function wrapFetchWithPayment(fetch, walletClient, maxValue = BigInt(0.1 * 10 ** 6), paymentRequirementsSelector = selectPaymentRequirements) {
  return async (input, init) => {
    var _a, _b, _c;
    const response = await fetch(input, init);
    if (response.status !== 402) {
      return response;
    }
    const { x402Version, accepts } = await response.json();
    const parsedPaymentRequirements = accepts.map((x) => PaymentRequirementsSchema.parse(x));
    const chainId = evm.isSignerWallet(walletClient) ? (_a = walletClient.chain) == null ? void 0 : _a.id : evm.isAccount(walletClient) ? (_c = (_b = walletClient.client) == null ? void 0 : _b.chain) == null ? void 0 : _c.id : void 0;
    const selectedPaymentRequirements = paymentRequirementsSelector(
      parsedPaymentRequirements,
      chainId ? ChainIdToNetwork[chainId] : void 0,
      "exact"
    );
    if (BigInt(selectedPaymentRequirements.maxAmountRequired) > maxValue) {
      throw new Error("Payment amount exceeds maximum allowed");
    }
    const paymentHeader = await createPaymentHeader(
      walletClient,
      x402Version,
      selectedPaymentRequirements
    );
    if (!init) {
      throw new Error("Missing fetch request configuration");
    }
    if (init.__is402Retry) {
      throw new Error("Payment already attempted");
    }
    const newInit = {
      ...init,
      headers: {
        ...init.headers || {},
        "X-PAYMENT": paymentHeader,
        "Access-Control-Expose-Headers": "X-PAYMENT-RESPONSE"
      },
      __is402Retry: true
    };
    const secondResponse = await fetch(input, newInit);
    return secondResponse;
  };
}
export {
  decodeXPaymentResponse,
  wrapFetchWithPayment
};
//# sourceMappingURL=index.mjs.map