{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import { ChainIdToNetwork, PaymentRequirementsSchema } from \"x402/types\";\nimport { evm } from \"x402/types\";\nimport {\n  createPaymentHeader,\n  PaymentRequirementsSelector,\n  selectPaymentRequirements,\n} from \"x402/client\";\nimport { Account } from \"viem\";\n\n/**\n * Enables the payment of APIs using the x402 payment protocol.\n *\n * This function wraps the native fetch API to automatically handle 402 Payment Required responses\n * by creating and sending a payment header. It will:\n * 1. Make the initial request\n * 2. If a 402 response is received, parse the payment requirements\n * 3. Verify the payment amount is within the allowed maximum\n * 4. Create a payment header using the provided wallet client\n * 5. Retry the request with the payment header\n *\n * @param fetch - The fetch function to wrap (typically globalThis.fetch)\n * @param walletClient - The wallet client used to sign payment messages\n * @param maxValue - The maximum allowed payment amount in base units (defaults to 0.1 USDC)\n * @param paymentRequirementsSelector - A function that selects the payment requirements from the response\n * @returns A wrapped fetch function that handles 402 responses automatically\n *\n * @example\n * ```typescript\n * const wallet = new SignerWallet(...);\n * const fetchWithPay = wrapFetchWithPayment(fetch, wallet);\n *\n * // Make a request that may require payment\n * const response = await fetchWithPay('https://api.example.com/paid-endpoint');\n * ```\n *\n * @throws {Error} If the payment amount exceeds the maximum allowed value\n * @throws {Error} If the request configuration is missing\n * @throws {Error} If a payment has already been attempted for this request\n * @throws {Error} If there's an error creating the payment header\n */\nexport function wrapFetchWithPayment(\n  fetch: typeof globalThis.fetch,\n  walletClient: typeof evm.SignerWallet | Account,\n  maxValue: bigint = BigInt(0.1 * 10 ** 6), // Default to 0.10 USDC\n  paymentRequirementsSelector: PaymentRequirementsSelector = selectPaymentRequirements,\n) {\n  return async (input: RequestInfo, init?: RequestInit) => {\n    const response = await fetch(input, init);\n\n    if (response.status !== 402) {\n      return response;\n    }\n\n    const { x402Version, accepts } = (await response.json()) as {\n      x402Version: number;\n      accepts: unknown[];\n    };\n    const parsedPaymentRequirements = accepts.map(x => PaymentRequirementsSchema.parse(x));\n\n    const chainId = evm.isSignerWallet(walletClient)\n      ? walletClient.chain?.id\n      : evm.isAccount(walletClient)\n        ? walletClient.client?.chain?.id\n        : undefined;\n    const selectedPaymentRequirements = paymentRequirementsSelector(\n      parsedPaymentRequirements,\n      chainId ? ChainIdToNetwork[chainId] : undefined,\n      \"exact\",\n    );\n\n    if (BigInt(selectedPaymentRequirements.maxAmountRequired) > maxValue) {\n      throw new Error(\"Payment amount exceeds maximum allowed\");\n    }\n\n    const paymentHeader = await createPaymentHeader(\n      walletClient,\n      x402Version,\n      selectedPaymentRequirements,\n    );\n\n    if (!init) {\n      throw new Error(\"Missing fetch request configuration\");\n    }\n\n    if ((init as { __is402Retry?: boolean }).__is402Retry) {\n      throw new Error(\"Payment already attempted\");\n    }\n\n    const newInit = {\n      ...init,\n      headers: {\n        ...(init.headers || {}),\n        \"X-PAYMENT\": paymentHeader,\n        \"Access-Control-Expose-Headers\": \"X-PAYMENT-RESPONSE\",\n      },\n      __is402Retry: true,\n    };\n\n    const secondResponse = await fetch(input, newInit);\n    return secondResponse;\n  };\n}\n\nexport { decodeXPaymentResponse } from \"x402/shared\";\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA4D;AAC5D,IAAAA,gBAAoB;AACpB,oBAIO;AAiGP,oBAAuC;AA/DhC,SAAS,qBACd,OACA,cACA,WAAmB,OAAO,MAAM,MAAM,CAAC,GACvC,8BAA2D,yCAC3D;AACA,SAAO,OAAO,OAAoB,SAAuB;AA9C3D;AA+CI,UAAM,WAAW,MAAM,MAAM,OAAO,IAAI;AAExC,QAAI,SAAS,WAAW,KAAK;AAC3B,aAAO;AAAA,IACT;AAEA,UAAM,EAAE,aAAa,QAAQ,IAAK,MAAM,SAAS,KAAK;AAItD,UAAM,4BAA4B,QAAQ,IAAI,OAAK,uCAA0B,MAAM,CAAC,CAAC;AAErF,UAAM,UAAU,kBAAI,eAAe,YAAY,KAC3C,kBAAa,UAAb,mBAAoB,KACpB,kBAAI,UAAU,YAAY,KACxB,wBAAa,WAAb,mBAAqB,UAArB,mBAA4B,KAC5B;AACN,UAAM,8BAA8B;AAAA,MAClC;AAAA,MACA,UAAU,8BAAiB,OAAO,IAAI;AAAA,MACtC;AAAA,IACF;AAEA,QAAI,OAAO,4BAA4B,iBAAiB,IAAI,UAAU;AACpE,YAAM,IAAI,MAAM,wCAAwC;AAAA,IAC1D;AAEA,UAAM,gBAAgB,UAAM;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACvD;AAEA,QAAK,KAAoC,cAAc;AACrD,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAEA,UAAM,UAAU;AAAA,MACd,GAAG;AAAA,MACH,SAAS;AAAA,QACP,GAAI,KAAK,WAAW,CAAC;AAAA,QACrB,aAAa;AAAA,QACb,iCAAiC;AAAA,MACnC;AAAA,MACA,cAAc;AAAA,IAChB;AAEA,UAAM,iBAAiB,MAAM,MAAM,OAAO,OAAO;AACjD,WAAO;AAAA,EACT;AACF;","names":["import_types"]}