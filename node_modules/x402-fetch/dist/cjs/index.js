"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  decodeXPaymentResponse: () => import_shared.decodeXPaymentResponse,
  wrapFetchWithPayment: () => wrapFetchWithPayment
});
module.exports = __toCommonJS(src_exports);
var import_types = require("x402/types");
var import_types2 = require("x402/types");
var import_client = require("x402/client");
var import_shared = require("x402/shared");
function wrapFetchWithPayment(fetch, walletClient, maxValue = BigInt(0.1 * 10 ** 6), paymentRequirementsSelector = import_client.selectPaymentRequirements) {
  return async (input, init) => {
    var _a, _b, _c;
    const response = await fetch(input, init);
    if (response.status !== 402) {
      return response;
    }
    const { x402Version, accepts } = await response.json();
    const parsedPaymentRequirements = accepts.map((x) => import_types.PaymentRequirementsSchema.parse(x));
    const chainId = import_types2.evm.isSignerWallet(walletClient) ? (_a = walletClient.chain) == null ? void 0 : _a.id : import_types2.evm.isAccount(walletClient) ? (_c = (_b = walletClient.client) == null ? void 0 : _b.chain) == null ? void 0 : _c.id : void 0;
    const selectedPaymentRequirements = paymentRequirementsSelector(
      parsedPaymentRequirements,
      chainId ? import_types.ChainIdToNetwork[chainId] : void 0,
      "exact"
    );
    if (BigInt(selectedPaymentRequirements.maxAmountRequired) > maxValue) {
      throw new Error("Payment amount exceeds maximum allowed");
    }
    const paymentHeader = await (0, import_client.createPaymentHeader)(
      walletClient,
      x402Version,
      selectedPaymentRequirements
    );
    if (!init) {
      throw new Error("Missing fetch request configuration");
    }
    if (init.__is402Retry) {
      throw new Error("Payment already attempted");
    }
    const newInit = {
      ...init,
      headers: {
        ...init.headers || {},
        "X-PAYMENT": paymentHeader,
        "Access-Control-Expose-Headers": "X-PAYMENT-RESPONSE"
      },
      __is402Retry: true
    };
    const secondResponse = await fetch(input, newInit);
    return secondResponse;
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decodeXPaymentResponse,
  wrapFetchWithPayment
});
//# sourceMappingURL=index.js.map