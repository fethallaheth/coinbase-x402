{"version":3,"sources":["../../../src/shared/index.ts","../../../src/shared/json.ts","../../../src/types/shared/evm/config.ts","../../../src/types/shared/evm/wallet.ts","../../../src/schemes/exact/evm/sign.ts","../../../src/types/verify/x402Specs.ts","../../../src/types/shared/money.ts","../../../src/types/shared/network.ts","../../../src/types/verify/facilitator.ts","../../../src/shared/evm/usdc.ts","../../../src/shared/network.ts","../../../src/client/selectPaymentRequirements.ts","../../../src/shared/paywall.ts","../../../src/shared/base64.ts","../../../src/shared/cdp.ts","../../../src/version.ts","../../../src/shared/middleware.ts"],"sourcesContent":["export * from \"./json\";\nexport * from \"./paywall\";\nexport * from \"./base64\";\nexport * from \"./network\";\nexport * from \"./cdp\";\nexport * from \"./middleware\";\n","/**\n * Converts an object to a JSON-safe format by converting bigint values to strings\n * and recursively processing nested objects and arrays\n *\n * @param data - The object to convert to JSON-safe format\n * @returns A new object with all bigint values converted to strings\n */\nexport function toJsonSafe<T extends object>(data: T): object {\n  if (typeof data !== \"object\") {\n    throw new Error(\"Data is not an object\");\n  }\n\n  /**\n   * Recursively converts values to JSON-safe format\n   *\n   * @param value - The value to convert\n   * @returns The converted value with bigints as strings\n   */\n  function convert(value: unknown): unknown {\n    if (value !== null && typeof value === \"object\" && !Array.isArray(value)) {\n      return Object.fromEntries(Object.entries(value).map(([key, val]) => [key, convert(val)]));\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(convert);\n    }\n\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  }\n\n  return convert(data) as object;\n}\n","import { Address } from \"viem\";\n\nexport const config: Record<string, ChainConfig> = {\n  \"84532\": {\n    usdcAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n    usdcName: \"USDC\",\n  },\n  \"8453\": {\n    usdcAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n    usdcName: \"USDC\",\n  },\n};\n\nexport type ChainConfig = {\n  usdcAddress: Address;\n  usdcName: string;\n};\n","import { createPublicClient, createWalletClient, http, publicActions } from \"viem\";\nimport type {\n  Chain,\n  Transport,\n  Client,\n  Account,\n  RpcSchema,\n  PublicActions,\n  WalletActions,\n  PublicClient,\n} from \"viem\";\nimport { baseSepolia } from \"viem/chains\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { Hex } from \"viem\";\n\n// Create a public client for reading data\nexport type SignerWallet<\n  chain extends Chain = Chain,\n  transport extends Transport = Transport,\n  account extends Account = Account,\n> = Client<\n  transport,\n  chain,\n  account,\n  RpcSchema,\n  PublicActions<transport, chain, account> & WalletActions<chain, account>\n>;\n\nexport type ConnectedClient<\n  transport extends Transport = Transport,\n  chain extends Chain | undefined = Chain,\n  account extends Account | undefined = undefined,\n> = PublicClient<transport, chain, account>;\n\n/**\n * Creates a public client configured for the Base Sepolia testnet\n *\n * @returns A public client instance connected to Base Sepolia\n */\nexport function createClientSepolia(): ConnectedClient<Transport, typeof baseSepolia, undefined> {\n  return createPublicClient({\n    chain: baseSepolia,\n    transport: http(),\n  }).extend(publicActions);\n}\n\n/**\n * Creates a wallet client configured for the Base Sepolia testnet with a private key\n *\n * @param privateKey - The private key to use for signing transactions\n * @returns A wallet client instance connected to Base Sepolia with the provided private key\n */\nexport function createSignerSepolia(privateKey: Hex): SignerWallet<typeof baseSepolia> {\n  return createWalletClient({\n    chain: baseSepolia,\n    transport: http(),\n    account: privateKeyToAccount(privateKey),\n  }).extend(publicActions);\n}\n\n/**\n * Checks if a wallet is a signer wallet\n *\n * @param wallet - The wallet to check\n * @returns True if the wallet is a signer wallet, false otherwise\n */\nexport function isSignerWallet<\n  TChain extends Chain = Chain,\n  TTransport extends Transport = Transport,\n  TAccount extends Account = Account,\n>(\n  wallet: SignerWallet<TChain, TTransport, TAccount> | Account,\n): wallet is SignerWallet<TChain, TTransport, TAccount> {\n  return \"chain\" in wallet && \"transport\" in wallet;\n}\n\n/**\n * Checks if a wallet is an account\n *\n * @param wallet - The wallet to check\n * @returns True if the wallet is an account, false otherwise\n */\nexport function isAccount(wallet: SignerWallet | Account): wallet is Account {\n  return \"address\" in wallet && \"type\" in wallet;\n}\n","import { getRandomValues } from \"crypto\";\nimport { Account, Address, Chain, Hex, toHex, Transport } from \"viem\";\nimport { getNetworkId } from \"../../../shared\";\nimport {\n  authorizationTypes,\n  isAccount,\n  isSignerWallet,\n  SignerWallet,\n} from \"../../../types/shared/evm\";\nimport { ExactEvmPayloadAuthorization, PaymentRequirements } from \"../../../types/verify\";\n\n/**\n * Signs an EIP-3009 authorization for USDC transfer\n *\n * @param walletClient - The wallet client that will sign the authorization\n * @param params - The authorization parameters containing transfer details\n * @param params.from - The address tokens will be transferred from\n * @param params.to - The address tokens will be transferred to\n * @param params.value - The amount of USDC tokens to transfer (in base units)\n * @param params.validAfter - Unix timestamp after which the authorization becomes valid\n * @param params.validBefore - Unix timestamp before which the authorization is valid\n * @param params.nonce - Random 32-byte nonce to prevent replay attacks\n * @param paymentRequirements - The payment requirements containing asset and network information\n * @param paymentRequirements.asset - The address of the USDC contract\n * @param paymentRequirements.network - The network where the USDC contract exists\n * @param paymentRequirements.extra - The extra information containing the name and version of the ERC20 contract\n * @returns The signature for the authorization\n */\nexport async function signAuthorization<transport extends Transport, chain extends Chain>(\n  walletClient: SignerWallet<chain, transport> | Account,\n  { from, to, value, validAfter, validBefore, nonce }: ExactEvmPayloadAuthorization,\n  { asset, network, extra }: PaymentRequirements,\n): Promise<{ signature: Hex }> {\n  const chainId = getNetworkId(network);\n  const name = extra?.name;\n  const version = extra?.version;\n  const account = isSignerWallet(walletClient) ? walletClient.account : walletClient;\n\n  const data = {\n    account,\n    types: authorizationTypes,\n    domain: {\n      name,\n      version,\n      chainId,\n      verifyingContract: asset as Address,\n    },\n    primaryType: \"TransferWithAuthorization\" as const,\n    message: {\n      from,\n      to,\n      value,\n      validAfter,\n      validBefore,\n      nonce: nonce,\n    },\n  };\n\n  if (isSignerWallet(walletClient)) {\n    const signature = await walletClient.signTypedData(data);\n    return {\n      signature,\n    };\n  } else if (isAccount(walletClient) && walletClient.signTypedData) {\n    const signature = await walletClient.signTypedData(data);\n    return {\n      signature,\n    };\n  } else {\n    throw new Error(\"Invalid wallet client provided does not support signTypedData\");\n  }\n}\n\n/**\n * Generates a random 32-byte nonce for use in authorization signatures\n *\n * @returns A random 32-byte nonce as a hex string\n */\nexport function createNonce(): Hex {\n  return toHex(getRandomValues(new Uint8Array(32)));\n}\n","import { z } from \"zod\";\nimport { NetworkSchema } from \"../shared\";\n// Constants\nconst EvmMaxAtomicUnits = 18;\nconst EvmAddressRegex = /^0x[0-9a-fA-F]{40}$/;\nconst MixedAddressRegex = /^0x[a-fA-F0-9]{40}|[A-Za-z0-9][A-Za-z0-9-]{0,34}[A-Za-z0-9]$/;\nconst HexEncoded64ByteRegex = /^0x[0-9a-fA-F]{64}$/;\nconst EvmSignatureRegex = /^0x[0-9a-fA-F]{130}$/;\n// Enums\nexport const schemes = [\"exact\"] as const;\nexport const x402Versions = [1] as const;\nexport const ErrorReasons = [\"insufficient_funds\", \"invalid_scheme\", \"invalid_network\"] as const;\n// Refiners\nconst isInteger = (value: string) => Number.isInteger(Number(value)) && Number(value) >= 0;\nconst hasMaxLength = (maxLength: number) => (value: string) => value.length <= maxLength;\n\n// x402PaymentRequirements\nexport const PaymentRequirementsSchema = z.object({\n  scheme: z.enum(schemes),\n  network: NetworkSchema,\n  maxAmountRequired: z.string().refine(isInteger),\n  resource: z.string().url(),\n  description: z.string(),\n  mimeType: z.string(),\n  outputSchema: z.record(z.any()).optional(),\n  payTo: z.string().regex(MixedAddressRegex),\n  maxTimeoutSeconds: z.number().int(),\n  asset: z.string().regex(MixedAddressRegex),\n  extra: z.record(z.any()).optional(),\n});\nexport type PaymentRequirements = z.infer<typeof PaymentRequirementsSchema>;\n\n// x402ExactEvmPayload\nexport const ExactEvmPayloadAuthorizationSchema = z.object({\n  from: z.string().regex(EvmAddressRegex),\n  to: z.string().regex(EvmAddressRegex),\n  value: z.string().refine(isInteger).refine(hasMaxLength(EvmMaxAtomicUnits)),\n  validAfter: z.string().refine(isInteger),\n  validBefore: z.string().refine(isInteger),\n  nonce: z.string().regex(HexEncoded64ByteRegex),\n});\nexport type ExactEvmPayloadAuthorization = z.infer<typeof ExactEvmPayloadAuthorizationSchema>;\n\nexport const ExactEvmPayloadSchema = z.object({\n  signature: z.string().regex(EvmSignatureRegex),\n  authorization: ExactEvmPayloadAuthorizationSchema,\n});\nexport type ExactEvmPayload = z.infer<typeof ExactEvmPayloadSchema>;\n\n// x402PaymentPayload\nexport const PaymentPayloadSchema = z.object({\n  x402Version: z.number().refine(val => x402Versions.includes(val as 1)),\n  scheme: z.enum(schemes),\n  network: NetworkSchema,\n  payload: ExactEvmPayloadSchema,\n});\nexport type PaymentPayload = z.infer<typeof PaymentPayloadSchema>;\nexport type UnsignedPaymentPayload = Omit<PaymentPayload, \"payload\"> & {\n  payload: Omit<ExactEvmPayload, \"signature\"> & { signature: undefined };\n};\n\n// x402VerifyResponse\nexport const VerifyResponseSchema = z.object({\n  isValid: z.boolean(),\n  invalidReason: z.enum(ErrorReasons).optional(),\n  payer: z.string().regex(MixedAddressRegex).optional(),\n});\nexport type VerifyResponse = z.infer<typeof VerifyResponseSchema>;\n\n// x402SettleResponse\nexport const SettleResponseSchema = z.object({\n  success: z.boolean(),\n  errorReason: z.enum(ErrorReasons).optional(),\n  payer: z.string().regex(MixedAddressRegex).optional(),\n  transaction: z.string().regex(MixedAddressRegex),\n  network: NetworkSchema,\n});\nexport type SettleResponse = z.infer<typeof SettleResponseSchema>;\n\n// x402SupportedPaymentKind\nexport const SupportedPaymentKindSchema = z.object({\n  x402Version: z.number().refine(val => x402Versions.includes(val as 1)),\n  scheme: z.enum(schemes),\n  network: NetworkSchema,\n});\nexport type SupportedPaymentKind = z.infer<typeof SupportedPaymentKindSchema>;\n\n// x402SupportedPaymentKindsResponse\nexport const SupportedPaymentKindsResponseSchema = z.object({\n  kinds: z.array(SupportedPaymentKindSchema),\n});\nexport type SupportedPaymentKindsResponse = z.infer<typeof SupportedPaymentKindsResponseSchema>;\n","import { z } from \"zod\";\n\nexport const moneySchema = z\n  .union([z.string().transform(x => x.replace(/[^0-9.-]+/g, \"\")), z.number()])\n  .pipe(z.coerce.number().min(0.0001).max(999999999));\n\nexport type Money = z.input<typeof moneySchema>;\n","import { z } from \"zod\";\n\nexport const NetworkSchema = z.enum([\"base-sepolia\", \"base\"]);\nexport type Network = z.infer<typeof NetworkSchema>;\n\nexport const SupportedEVMNetworks: Network[] = [\"base-sepolia\", \"base\"];\nexport const EvmNetworkToChainId = new Map<Network, number>([\n  [\"base-sepolia\", 84532],\n  [\"base\", 8453],\n]);\n\nexport const ChainIdToNetwork = Object.fromEntries(\n  SupportedEVMNetworks.map(network => [EvmNetworkToChainId.get(network), network]),\n) as Record<number, Network>;\n","import { z } from \"zod\";\nimport { safeBase64Decode, safeBase64Encode } from \"../../shared\";\nimport { PaymentRequirementsSchema, SettleResponse } from \"./x402Specs\";\n\nexport const facilitatorRequestSchema = z.object({\n  paymentHeader: z.string(),\n  paymentRequirements: PaymentRequirementsSchema,\n});\n\nexport type FacilitatorRequest = z.infer<typeof facilitatorRequestSchema>;\n\n/**\n * Encodes a settlement response into a base64 header string\n *\n * @param response - The settlement response to encode\n * @returns A base64 encoded string containing the settlement response\n */\nexport function settleResponseHeader(response: SettleResponse): string {\n  return safeBase64Encode(JSON.stringify(response));\n}\n\n/**\n * Decodes a base64 header string back into a settlement response\n *\n * @param header - The base64 encoded settlement response header\n * @returns The decoded settlement response object\n */\nexport function settleResponseFromHeader(header: string): SettleResponse {\n  const decoded = safeBase64Decode(header);\n  return JSON.parse(decoded) as SettleResponse;\n}\n","import { Account, Address, Chain, Client, Transport } from \"viem\";\nimport { config } from \"../../types/shared/evm/config\";\nimport { usdcABI as abi } from \"../../types/shared/evm/erc20PermitABI\";\nimport { ConnectedClient } from \"../../types/shared/evm/wallet\";\n\n/**\n * Gets the USDC contract address for the current chain from the client\n *\n * @param client - The Viem client instance connected to the blockchain\n * @returns The USDC contract address for the current chain\n */\nexport function getUsdcAddress<\n  transport extends Transport,\n  chain extends Chain | undefined = undefined,\n  account extends Account | undefined = undefined,\n>(client: Client<transport, chain, account>): Address {\n  return config[client.chain!.id.toString()].usdcAddress as Address;\n}\n\n/**\n * Gets the USDC contract address for a specific chain ID\n *\n * @param chainId - The chain ID to get the USDC contract address for\n * @returns The USDC contract address for the specified chain\n */\nexport function getUsdcAddressForChain(chainId: number): Address {\n  return config[chainId.toString()].usdcAddress as Address;\n}\n\n// Cache for storing the version value\nlet versionCache: string | null = null;\n\n/**\n * Gets the version of the USDC contract, using a cache to avoid repeated calls\n *\n * @param client - The Viem client instance connected to the blockchain\n * @returns A promise that resolves to the USDC contract version string\n */\nexport async function getVersion<\n  transport extends Transport,\n  chain extends Chain,\n  account extends Account | undefined = undefined,\n>(client: ConnectedClient<transport, chain, account>): Promise<string> {\n  // Return cached version if available\n  if (versionCache !== null) {\n    return versionCache;\n  }\n\n  // Fetch and cache version if not available\n  const version = await client.readContract({\n    address: getUsdcAddress(client),\n    abi,\n    functionName: \"version\",\n  });\n  versionCache = version as string;\n  return versionCache;\n}\n\n/**\n * Gets the USDC balance for a specific address\n *\n * @param client - The Viem client instance connected to the blockchain\n * @param address - The address to check the USDC balance for\n * @returns A promise that resolves to the USDC balance as a bigint\n */\nexport async function getUSDCBalance<\n  transport extends Transport,\n  chain extends Chain,\n  account extends Account | undefined = undefined,\n>(client: ConnectedClient<transport, chain, account>, address: Address): Promise<bigint> {\n  const balance = await client.readContract({\n    address: getUsdcAddressForChain(client.chain!.id),\n    abi,\n    functionName: \"balanceOf\",\n    args: [address],\n  });\n  return balance as bigint;\n}\n","import { EvmNetworkToChainId, Network } from \"../types/shared\";\n\n/**\n * Converts a network name to its corresponding chain ID\n *\n * @param network - The network name to convert to a chain ID\n * @returns The chain ID for the specified network\n * @throws Error if the network is not supported\n */\nexport function getNetworkId(network: Network): number {\n  if (EvmNetworkToChainId.has(network)) {\n    return EvmNetworkToChainId.get(network)!;\n  }\n  // TODO: Solana\n  throw new Error(`Unsupported network: ${network}`);\n}\n","import { Network, PaymentRequirements } from \"../types\";\nimport { getUsdcAddressForChain } from \"../shared/evm\";\nimport { getNetworkId } from \"../shared/network\";\n\n/**\n * Default selector for payment requirements.\n * Default behavior is to select the first payment requirement that has a USDC asset.\n * If no USDC payment requirement is found, the first payment requirement is selected.\n * \n * @param paymentRequirements - The payment requirements to select from.\n * @param network - The network to check against. If not provided, the network will not be checked.\n * @param scheme - The scheme to check against. If not provided, the scheme will not be checked.\n * @returns The payment requirement that is the most appropriate for the user.\n */\nexport function selectPaymentRequirements(paymentRequirements: PaymentRequirements[], network?: Network, scheme?: \"exact\"): PaymentRequirements {\n  // Sort `base` payment requirements to the front of the list. This is to ensure that base is preferred if available.\n  paymentRequirements.sort((a, b) => {\n    if (a.network === \"base\" && b.network !== \"base\") {\n      return -1;\n    }\n    if (a.network !== \"base\" && b.network === \"base\") {\n      return 1;\n    }\n    return 0;\n  });\n\n  // Filter down to the scheme/network if provided\n  const broadlyAcceptedPaymentRequirements = paymentRequirements.filter(requirement => {\n    // If the scheme is not provided, we accept any scheme.\n    const isExpectedScheme = !scheme || requirement.scheme === scheme;\n    // If the chain is not provided, we accept any chain.\n    const isExpectedChain = !network || network == requirement.network;\n\n    return isExpectedScheme && isExpectedChain;\n  });\n\n  // Filter down to USDC requirements\n  const usdcRequirements = broadlyAcceptedPaymentRequirements.filter(requirement => {\n    // If the address is a USDC address, we return it.\n    return requirement.asset === getUsdcAddressForChain(getNetworkId(requirement.network));\n  });\n\n  // Prioritize USDC requirements if available\n  if (usdcRequirements.length > 0) {\n    return usdcRequirements[0];\n  }\n\n  // If no USDC requirements are found, return the first broadly accepted requirement.\n  if (broadlyAcceptedPaymentRequirements.length > 0) {\n    return broadlyAcceptedPaymentRequirements[0];\n  }\n\n  // If no matching requirements are found, return the first requirement.\n  return paymentRequirements[0];\n}\n\n/**\n * Selector for payment requirements.\n * \n * @param paymentRequirements - The payment requirements to select from.\n * @param network - The network to check against. If not provided, the network will not be checked.\n * @param scheme - The scheme to check against. If not provided, the scheme will not be checked.\n * @returns The payment requirement that is the most appropriate for the user.\n */\nexport type PaymentRequirementsSelector = (paymentRequirements: PaymentRequirements[], network?: Network, scheme?: \"exact\") => PaymentRequirements;\n","import { selectPaymentRequirements } from \"../client\";\nimport { PaymentRequirements } from \"../types/verify\";\n\ninterface PaywallOptions {\n  amount: number;\n  paymentRequirements: PaymentRequirements[];\n  currentUrl: string;\n  testnet: boolean;\n}\n\n/**\n * Generates an HTML paywall page that allows users to pay for content access\n *\n * @param options - The options for generating the paywall\n * @param options.amount - The amount to be paid in USD\n * @param options.paymentRequirements - The payment requirements for the content\n * @param options.currentUrl - The URL of the content being accessed\n * @param options.testnet - Whether to use testnet or mainnet\n * @returns An HTML string containing the paywall page\n */\nexport function getPaywallHtml({\n  amount,\n  testnet,\n  paymentRequirements,\n  currentUrl,\n}: PaywallOptions): string {\n  const selectedPaymentRequirements = selectPaymentRequirements(\n    paymentRequirements,\n    testnet ? \"base-sepolia\" : \"base\",\n    \"exact\",\n  );\n  return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Payment Required - $${amount}</title>\n<link rel=\"icon\" href=\"/favicon.ico\" sizes=\"any\" />\n\n<style>\n  /* Reset */\n  *, *::before, *::after { box-sizing: border-box; margin: 0; padding: 0; }\n  body { line-height: 1.5; -webkit-font-smoothing: antialiased; }\n  img, picture, video, canvas, svg { display: block; max-width: 100%; }\n  input, button, textarea, select { font: inherit; }\n  p, h1, h2, h3, h4, h5, h6 { overflow-wrap: break-word; }\n\n  /* Custom Styles */\n  body {\n    min-height: 100vh;\n    background-color: #f9fafb;\n    font-family: system-ui, -apple-system, sans-serif;\n  }\n\n  .container {\n    max-width: 32rem;\n    margin: 4rem auto;\n    padding: 1.5rem;\n    background-color: white;\n    border-radius: 0.75rem;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n\n  .header {\n    text-align: center;\n    margin-bottom: 2rem;\n  }\n\n  .title {\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: #111827;\n    margin-bottom: 0.5rem;\n  }\n\n  .subtitle {\n    color: #4b5563;\n    margin-bottom: 1rem;\n  }\n\n  .instructions {\n    font-size: 0.9rem;\n    color: #4b5563;\n    font-style: italic;\n  }\n\n  .content {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  .button {\n    width: 100%;\n    padding: 0.5rem 1rem;\n    border-radius: 0.5rem;\n    font-weight: 600;\n    border: none;\n    cursor: pointer;\n    transition: background-color 150ms;\n  }\n\n  .button:focus {\n    outline: none;\n    ring: 2px solid rgba(59, 130, 246, 0.5);\n  }\n\n  .button-blue {\n    background-color: #2563eb;\n    color: white;\n  }\n\n  .button-blue:hover {\n    background-color: #1d4ed8;\n  }\n\n  .button-green {\n    background-color: #059669;\n    color: white;\n  }\n\n  .button-green:hover {\n    background-color: #047857;\n  }\n\n  .payment-details {\n    padding: 1rem;\n    background-color: #f9fafb;\n    border-radius: 0.5rem;\n  }\n\n  .payment-row {\n    display: flex;\n    justify-content: space-between;\n    font-size: 0.875rem;\n    margin-bottom: 0.5rem;\n  }\n\n  .payment-row:last-child {\n    margin-bottom: 0;\n  }\n\n  .payment-label {\n    color: #4b5563;\n  }\n\n  .payment-value {\n    font-weight: 500;\n  }\n\n  .hidden {\n    display: none;\n  }\n\n  .status {\n    text-align: center;\n    font-size: 0.875rem;\n  }\n</style>\n\n<!-- Inject server-side variables -->\n<script>\n  try {\n    // Initialize x402 namespace\n    window.x402 = {\n      paymentRequirements: ${JSON.stringify(selectedPaymentRequirements)},\n      isTestnet: ${testnet},\n      currentUrl: \"${currentUrl}\",\n      state: {\n        publicClient: null,\n        chain: null,\n        walletClient: null\n      },\n      config: {\n        chainConfig: {\n          \"84532\": {\n            usdcAddress: \"0x036CbD53842c5426634e7929541eC2318f3dCF7e\",\n            usdcName: \"USDC\",\n          },\n          \"8453\": {\n            usdcAddress: \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\",\n            usdcName: \"USDC\",\n          }\n        },\n        networkToChainId: {\n          \"base-sepolia\": 84532,\n          \"base\": 8453\n        }\n      }\n    };\n    console.log('Payment requirements initialized:', window.x402.paymentRequirements);\n  } catch (error) {\n    console.error('Error initializing x402:', error.message);\n  };\n</script>\n\n<!-- x402 -->\n<script type=\"module\">\n  import {\n    createWalletClient,\n    createPublicClient,\n    http,\n    custom,\n    toHex,\n  } from 'https://esm.sh/viem'\n\n  import {\n    createConfig,\n    connect,\n    disconnect,\n    signMessage,\n    getBalance,\n  } from 'https://esm.sh/@wagmi/core'\n\n  import { injected, coinbaseWallet } from 'https://esm.sh/@wagmi/connectors'\n\n  import { base, baseSepolia } from 'https://esm.sh/viem/chains'\n\n  const authorizationTypes = {\n    EIP712Domain: [\n      { name: \"name\", type: \"string\" },\n      { name: \"version\", type: \"string\" },\n      { name: \"chainId\", type: \"uint256\" },\n      { name: \"verifyingContract\", type: \"address\" },\n    ],\n    TransferWithAuthorization: [\n      { name: \"from\", type: \"address\" },\n      { name: \"to\", type: \"address\" },\n      { name: \"value\", type: \"uint256\" },\n      { name: \"validAfter\", type: \"uint256\" },\n      { name: \"validBefore\", type: \"uint256\" },\n      { name: \"nonce\", type: \"bytes32\" },\n    ],\n  };\n\n  // USDC ABI for version function\n  const usdcABI = [{\n    \"inputs\": [],\n    \"name\": \"version\",\n    \"outputs\": [{\"internalType\": \"string\",\"name\": \"\",\"type\": \"string\"}],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  }];\n\n  window.x402.utils = {\n    createNonce: () => {\n      return toHex(crypto.getRandomValues(new Uint8Array(32)));\n    },\n    safeBase64Encode: (data) => {\n      if (typeof window !== \"undefined\") {\n        return window.btoa(data);\n      }\n      return Buffer.from(data).toString(\"base64\");\n    },\n    getUsdcAddressForChain: (chainId) => {\n      return window.x402.config.chainConfig[chainId.toString()].usdcAddress;\n    },\n    getNetworkId: (network) => {\n      const chainId = window.x402.config.networkToChainId[network];\n      if (!chainId) {\n        throw new Error('Unsupported network: ' + network);\n      }\n      return chainId;\n    },\n    getVersion: async (publicClient, usdcAddress) => {\n      const version = await publicClient.readContract({\n        address: usdcAddress,\n        abi: usdcABI,\n        functionName: \"version\"\n      });\n      return version;\n    },\n    encodePayment: (payment) => {\n      const safe = {\n        ...payment,\n        payload: {\n          ...payment.payload,\n          authorization: Object.fromEntries(\n            Object.entries(payment.payload.authorization).map(([key, value]) => [\n              key,\n              typeof value === \"bigint\" ? value.toString() : value,\n            ])\n          ),\n        },\n      };\n      return window.x402.utils.safeBase64Encode(JSON.stringify(safe));\n    },\n    createPaymentHeader: async (client, publicClient) => {\n      const payment = await window.x402.utils.createPayment(client, publicClient);\n      return window.x402.utils.encodePayment(payment);\n    },\n  }\n\n  window.x402.utils.signAuthorization = async (walletClient, authorizationParameters, paymentRequirements, publicClient) => {\n    const chainId = window.x402.utils.getNetworkId(paymentRequirements.network);\n    const name = paymentRequirements.extra?.name ?? window.x402.config.chainConfig[chainId].usdcName;\n    const erc20Address = paymentRequirements.asset;\n    const version = paymentRequirements.extra?.version ?? await window.x402.utils.getVersion(publicClient, erc20Address);\n    const { from, to, value, validAfter, validBefore, nonce } = authorizationParameters;\n    const data = {\n      account: walletClient.account,\n      types: authorizationTypes,\n      domain: {\n        name,\n        version,\n        chainId,\n        verifyingContract: erc20Address,\n      },\n      primaryType: \"TransferWithAuthorization\",\n      message: {\n        from,\n        to,\n        value,\n        validAfter,\n        validBefore,\n        nonce,\n      },\n    };\n\n    const signature = await walletClient.signTypedData(data);\n\n    return {\n      signature,\n    };\n  }\n\n  window.x402.utils.createPayment = async (client, publicClient) => {\n    if (!window.x402.paymentRequirements) {\n      throw new Error('Payment requirements not initialized');\n    }\n\n    const nonce = window.x402.utils.createNonce();\n    const version = await window.x402.utils.getVersion(publicClient, window.x402.utils.getUsdcAddressForChain(window.x402.utils.getNetworkId(window.x402.paymentRequirements.network)));\n    const from = client.account.address;\n\n    const validAfter = BigInt(\n      Math.floor(Date.now() / 1000) - 60 // 60 seconds before\n    );\n    const validBefore = BigInt(\n      Math.floor(Date.now() / 1000 + window.x402.paymentRequirements.maxTimeoutSeconds)\n    );\n\n    const { signature } = await window.x402.utils.signAuthorization(\n      client,\n      {\n        from,\n        to: window.x402.paymentRequirements.payTo,\n        value: window.x402.paymentRequirements.maxAmountRequired,\n        validAfter,\n        validBefore,\n        nonce,\n        version,\n      },\n      window.x402.paymentRequirements,\n      publicClient\n    );\n\n    return {\n      x402Version: 1,\n      scheme: window.x402.paymentRequirements.scheme,\n      network: window.x402.paymentRequirements.network,\n      payload: {\n        signature,\n        authorization: {\n          from,\n          to: window.x402.paymentRequirements.payTo,\n          value: window.x402.paymentRequirements.maxAmountRequired,\n          validAfter,\n          validBefore,\n          nonce,\n        },\n      },\n    };\n  }\n\n\n  async function initializeApp() {\n    const x402 = window.x402;\n    const wagmiConfig = createConfig({\n      chains: [base, baseSepolia],\n      connectors: [\n        coinbaseWallet({ appName: 'Create Wagmi' }),\n        injected(),\n      ],\n      transports: {\n        [base.id]: http(),\n        [baseSepolia.id]: http(),\n      },\n    });\n\n    // DOM Elements\n    const connectWalletBtn = document.getElementById('connect-wallet');\n    const paymentSection = document.getElementById('payment-section');\n    const payButton = document.getElementById('pay-button');\n    const statusDiv = document.getElementById('status');\n\n    if (!connectWalletBtn || !paymentSection || !payButton || !statusDiv) {\n      // console.error('Required DOM elements not found');\n      return;\n    }\n\n    let walletClient = null;\n    const chain = x402.isTestnet ? baseSepolia : base;\n\n    const publicClient = createPublicClient({\n      chain,\n      transport: custom(window.ethereum),\n    });\n\n    // Connect wallet handler\n    connectWalletBtn.addEventListener('click', async () => {\n      // If wallet is already connected, disconnect it\n      if (walletClient) {\n        try {\n          await disconnect(wagmiConfig);\n          walletClient = null;\n          connectWalletBtn.textContent = 'Connect Wallet';\n          paymentSection.classList.add('hidden');\n          statusDiv.textContent = 'Wallet disconnected';\n          return;\n        } catch (error) {\n          statusDiv.textContent = 'Failed to disconnect wallet';\n          return;\n        }\n      }\n\n      try {\n        statusDiv.textContent = 'Connecting wallet...';\n\n        const result = await connect(wagmiConfig, {\n          connector: injected(),\n          chainId: chain.id,\n        });\n        if (!result.accounts?.[0]) {\n          throw new Error('Please select an account in your wallet');\n        }\n        walletClient = createWalletClient({\n          account: result.accounts[0],\n          chain,\n          transport: custom(window.ethereum)\n        });\n\n        const address = result.accounts[0]\n\n        connectWalletBtn.textContent = \\`\\${address.slice(0, 6)}...\\${address.slice(-4)}\\`;\n        paymentSection.classList.remove('hidden');\n        statusDiv.textContent =\n          'Wallet connected! You can now proceed with payment.';\n      } catch (error) {\n        console.error('Connection error:', error);\n        statusDiv.textContent =\n          error instanceof Error ? error.message : 'Failed to connect wallet';\n        // Reset UI state\n        connectWalletBtn.textContent = 'Connect Wallet';\n        paymentSection.classList.add('hidden');\n      }\n    });\n\n  // Payment handler\n  payButton.addEventListener('click', async () => {\n    if (!walletClient) {\n      statusDiv.textContent = 'Please connect your wallet first';\n      return;\n    }\n\n    try {\n      const usdcAddress = window.x402.config.chainConfig[chain.id].usdcAddress;\n      try {\n        statusDiv.textContent = 'Checking USDC balance...';\n        const balance = await publicClient.readContract({\n          address: usdcAddress,\n          abi: [{\n            inputs: [{ internalType: \"address\", name: \"account\", type: \"address\" }],\n            name: \"balanceOf\",\n            outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n            stateMutability: \"view\",\n            type: \"function\"\n          }],\n          functionName: \"balanceOf\",\n          args: [walletClient.account.address]\n        });\n\n        if (balance === 0n) {\n          statusDiv.textContent = \\`Your USDC balance is 0. Please make sure you have USDC tokens on ${\n            testnet ? \"Base Sepolia\" : \"Base\"\n          }.\\`;\n          return;\n        }\n\n        statusDiv.textContent = 'Creating payment signature...';\n\n        const paymentHeader = await x402.utils.createPaymentHeader(walletClient, publicClient);\n\n        statusDiv.textContent = 'Requesting content with payment...';\n\n        const response = await fetch(x402.currentUrl, {\n          headers: {\n            'X-PAYMENT': paymentHeader,\n            'Access-Control-Expose-Headers': 'X-PAYMENT-RESPONSE',\n          },\n        });\n\n        if (response.ok) {\n          const contentType = response.headers.get('content-type');\n          if (contentType && contentType.includes('text/html')) {\n            document.documentElement.innerHTML = await response.text();\n          } else {\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            window.location.href = url;\n          }\n        } else {\n          throw new Error('Payment failed: ' + response.statusText);\n        }\n      } catch (error) {\n        statusDiv.textContent = error instanceof Error ? error.message : 'Failed to check USDC balance';\n      }\n    } catch (error) {\n      statusDiv.textContent = error instanceof Error ? error.message : 'Payment failed';\n    }\n  });\n}\n\nwindow.addEventListener('load', initializeApp);\n</script>\n</head>\n\n<body>\n  <div class=\"container\">\n    <div class=\"header\">\n      <h1 class=\"title\">Payment Required</h1>\n      <p class=\"subtitle\">${selectedPaymentRequirements.description}. To access this content, please pay $${amount} ${testnet ? \"Base Sepolia\" : \"Base\"} USDC.</p>\n      <p class=\"instructions\">Need Base Sepolia USDC? <a href=\"https://faucet.circle.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Get some here.</a></p>\n    </div>\n\n    <div class=\"content\">\n      <div id=\"connect-section\">\n        <button id=\"connect-wallet\" class=\"button button-blue\">\n            Connect Wallet\n        </button>\n      </div>\n\n      <div id=\"payment-section\" class=\"hidden\">\n        <div class=\"payment-details\">\n          <div class=\"payment-row\">\n            <span class=\"payment-label\">Amount:</span>\n            <span class=\"payment-value\">$${amount} USDC</span>\n          </div>\n          <div class=\"payment-row\">\n            <span class=\"payment-label\">Network:</span>\n            <span class=\"payment-value\">${testnet ? \"Base Sepolia\" : \"Base\"}</span>\n          </div>\n        </div>\n\n        <button id=\"pay-button\" class=\"button button-green\">\n            Pay Now\n        </button>\n      </div>\n      <div id=\"status\" class=\"status\"></div>\n    </div>\n  </div>\n</body>\n</html>`;\n}\n","/**\n * Encodes a string to base64 format\n *\n * @param data - The string to be encoded to base64\n * @returns The base64 encoded string\n */\nexport function safeBase64Encode(data: string): string {\n  return Buffer.from(data).toString(\"base64\");\n}\n\n/**\n * Decodes a base64 string back to its original format\n *\n * @param data - The base64 encoded string to be decoded\n * @returns The decoded string in UTF-8 format\n */\nexport function safeBase64Decode(data: string): string {\n  return Buffer.from(data, \"base64\").toString(\"utf-8\");\n}\n","import { generateJwt } from \"@coinbase/cdp-sdk/auth\";\nimport { version } from \"../version\";\n\nconst SDK_VERSION = \"1.1.1\";\n\n/**\n * Creates an authorization header for a request to the Coinbase API.\n *\n * @param apiKeyId - The api key ID\n * @param apiKeySecret - The api key secret\n * @param requestHost - The host for the request (e.g. 'https://x402.org/facilitator')\n * @param requestPath - The path for the request (e.g. '/verify')\n * @returns The authorization header string\n */\nexport async function createAuthHeader(\n  apiKeyId: string,\n  apiKeySecret: string,\n  requestHost: string,\n  requestPath: string,\n) {\n  const jwt = await generateJwt({\n    apiKeyId,\n    apiKeySecret,\n    requestMethod: \"POST\",\n    requestHost,\n    requestPath,\n  });\n  return `Bearer ${jwt}`;\n}\n\n/**\n * Creates a correlation header for a request to the Coinbase API.\n *\n * @returns The correlation header string\n */\nexport function createCorrelationHeader(): string {\n  const data: Record<string, string> = {\n    sdk_version: SDK_VERSION,\n    sdk_language: \"typescript\",\n    source: \"x402\",\n    source_version: version,\n  };\n  return Object.keys(data)\n    .map(key => `${key}=${encodeURIComponent(data[key])}`)\n    .join(\",\");\n}\n","export const version = \"0.3.3\";\n","import { Address, Hex } from \"viem\";\nimport {\n  moneySchema,\n  Network,\n  Price,\n  RouteConfig,\n  RoutePattern,\n  ERC20TokenAmount,\n  PaymentRequirements,\n  PaymentPayload,\n} from \"../types\";\nimport { RoutesConfig } from \"../types\";\nimport { safeBase64Decode } from \"./base64\";\nimport { getUsdcAddressForChain } from \"./evm\";\nimport { getNetworkId } from \"./network\";\n\n/**\n * Computes the route patterns for the given routes config\n *\n * @param routes - The routes config to compute the patterns for\n * @returns The route patterns\n */\nexport function computeRoutePatterns(routes: RoutesConfig): RoutePattern[] {\n  const normalizedRoutes = Object.fromEntries(\n    Object.entries(routes).map(([pattern, value]) => [\n      pattern,\n      typeof value === \"string\" || typeof value === \"number\"\n        ? ({ price: value, network: \"base-sepolia\" } as RouteConfig)\n        : (value as RouteConfig),\n    ]),\n  );\n\n  return Object.entries(normalizedRoutes).map(([pattern, routeConfig]) => {\n    // Split pattern into verb and path, defaulting to \"*\" for verb if not specified\n    const [verb, path] = pattern.includes(\" \") ? pattern.split(/\\s+/) : [\"*\", pattern];\n    if (!path) {\n      throw new Error(`Invalid route pattern: ${pattern}`);\n    }\n    return {\n      verb: verb.toUpperCase(),\n      pattern: new RegExp(\n        `^${path\n          .replace(/\\*/g, \".*?\") // Make wildcard non-greedy and optional\n          .replace(/\\[([^\\]]+)\\]/g, \"[^/]+\")\n          .replace(/\\//g, \"\\\\/\")}$`,\n        \"i\",\n      ),\n      config: routeConfig,\n    };\n  });\n}\n\n/**\n * Finds the matching route pattern for the given path and method\n *\n * @param routePatterns - The route patterns to search through\n * @param path - The path to match against\n * @param method - The HTTP method to match against\n * @returns The matching route pattern or undefined if no match is found\n */\nexport function findMatchingRoute(\n  routePatterns: RoutePattern[],\n  path: string,\n  method: string,\n): RoutePattern | undefined {\n  // Find matching route pattern\n  const matchingRoutes = routePatterns.filter(({ pattern, verb }) => {\n    const matchesPath = pattern.test(path);\n    const matchesVerb = verb === \"*\" || verb === method.toUpperCase();\n    return matchesPath && matchesVerb;\n  });\n\n  if (matchingRoutes.length === 0) {\n    return undefined;\n  }\n\n  // Use the most specific route (longest path pattern)\n  const matchingRoute = matchingRoutes.reduce((a, b) =>\n    b.pattern.source.length > a.pattern.source.length ? b : a,\n  );\n\n  return matchingRoute;\n}\n\n/**\n * Gets the default asset (USDC) for the given network\n *\n * @param network - The network to get the default asset for\n * @returns The default asset\n */\nexport function getDefaultAsset(network: Network) {\n  return {\n    address: getUsdcAddressForChain(getNetworkId(network)),\n    decimals: 6,\n    eip712: {\n      name: network === \"base\" ? \"USD Coin\" : \"USDC\",\n      version: \"2\",\n    },\n  };\n}\n\n/**\n * Parses the amount from the given price\n *\n * @param price - The price to parse\n * @param network - The network to get the default asset for\n * @returns The parsed amount or an error message\n */\nexport function processPriceToAtomicAmount(\n  price: Price,\n  network: Network,\n): { maxAmountRequired: string; asset: ERC20TokenAmount[\"asset\"] } | { error: string } {\n  // Handle USDC amount (string) or token amount (ERC20TokenAmount)\n  let maxAmountRequired: string;\n  let asset: ERC20TokenAmount[\"asset\"];\n\n  if (typeof price === \"string\" || typeof price === \"number\") {\n    // USDC amount in dollars\n    const parsedAmount = moneySchema.safeParse(price);\n    if (!parsedAmount.success) {\n      return {\n        error: `Invalid price (price: ${price}). Must be in the form \"$3.10\", 0.10, \"0.001\", ${parsedAmount.error}`,\n      };\n    }\n    const parsedUsdAmount = parsedAmount.data;\n    asset = getDefaultAsset(network);\n    maxAmountRequired = (parsedUsdAmount * 10 ** asset.decimals).toString();\n  } else {\n    // Token amount in atomic units\n    maxAmountRequired = price.amount;\n    asset = price.asset;\n  }\n\n  return {\n    maxAmountRequired,\n    asset,\n  };\n}\n\n/**\n * Finds the matching payment requirements for the given payment\n *\n * @param paymentRequirements - The payment requirements to search through\n * @param payment - The payment to match against\n * @returns The matching payment requirements or undefined if no match is found\n */\nexport function findMatchingPaymentRequirements(\n  paymentRequirements: PaymentRequirements[],\n  payment: PaymentPayload,\n) {\n  return paymentRequirements.find(\n    value => value.scheme === payment.scheme && value.network === payment.network,\n  );\n}\n\n/**\n * Decodes the X-PAYMENT-RESPONSE header\n *\n * @param header - The X-PAYMENT-RESPONSE header to decode\n * @returns The decoded payment response\n */\nexport function decodeXPaymentResponse(header: string) {\n  const decoded = safeBase64Decode(header);\n  return JSON.parse(decoded) as {\n    success: boolean;\n    transaction: Hex;\n    network: Network;\n    payer: Address;\n  };\n}\n"],"mappings":"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","names":["import_viem","import_zod","import_zod","import_zod"]}